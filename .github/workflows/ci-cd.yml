name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: password
  POSTGRES_DB: splitwise_test

jobs:
  test-backend:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install backend dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set environment variables
        run: |
          echo "DATABASE_URL=postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}" >> $GITHUB_ENV
          echo "API_TITLE=Splitwise API Test" >> $GITHUB_ENV
          echo "API_VERSION=1.0.0" >> $GITHUB_ENV
          echo "DEBUG=false" >> $GITHUB_ENV

      - name: Run backend tests
        working-directory: ./backend
        run: |
          # Test imports only, don't start the server
          python -c "
          try:
              from app.main import app
              from app.core.config import settings  
              from app.models.database import User, Group, Expense
              print('‚úÖ Backend imports successful')
          except Exception as e:
              print(f'‚ùå Import failed: {e}')
              exit(1)
          "

          echo "‚úÖ Backend tests completed"

  test-frontend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: pnpm install

      - name: Type check frontend
        working-directory: ./frontend
        run: pnpm run build

      - name: Lint frontend
        working-directory: ./frontend
        run: pnpm run lint

  integration-test:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and test with Docker Compose
        run: |
          # Create test environment file
          echo "DATABASE_URL=postgresql://postgres:password@postgres:5432/splitwise" > backend/.env
          echo "API_TITLE=Splitwise API" >> backend/.env
          echo "API_VERSION=1.0.0" >> backend/.env
          echo "DEBUG=false" >> backend/.env

          # Start services
          docker-compose up -d --build

          # Wait for services to be ready
          sleep 60

          # Test health endpoint
          curl -f http://localhost:8000/health || exit 1

          # Test API endpoints (with trailing slashes)
          curl -f http://localhost:8000/api/v1/users/ || exit 1
          curl -f http://localhost:8000/api/v1/groups/ || exit 1

          # Test API docs
          curl -f http://localhost:8000/docs || exit 1

          echo "‚úÖ Integration tests passed"

      - name: Clean up
        if: always()
        run: docker-compose down -v

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, integration-test]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker images
        run: |
          docker build -t splitwise-backend:latest ./backend
          docker build -t splitwise-frontend:latest ./frontend

          echo "‚úÖ Docker images built successfully"

      - name: Run security scan
        run: |
          # Add basic security checks
          echo "üîí Running basic security checks..."

          # Check for sensitive files
          if find . -name "*.env" -not -path "./.github/*" | grep -q .; then
            echo "‚ùå Found .env files in repository"
            exit 1
          fi

          echo "‚úÖ Basic security checks passed"
